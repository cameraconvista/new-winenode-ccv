
# 📊 REPORT STRUTTURA CODICE WINENODE - GENNAIO 2025
=================================================================

## 🏗️ ARCHITETTURA GENERALE
- **Framework**: React 18 + TypeScript + Vite
- **Database**: Supabase (PostgreSQL cloud)
- **Styling**: Tailwind CSS
- **Routing**: React Router DOM
- **State Management**: React Hooks + Custom Hooks
- **Build Tool**: Vite per sviluppo e produzione

## 📁 STRUTTURA DIRECTORY PRINCIPALE

### `/src` - CODICE SORGENTE PRINCIPALE
```
src/
├── components/     # Componenti React riutilizzabili (20 file)
├── pages/         # Pagine principali dell'app (10 file)
├── hooks/         # Custom hooks per logica condivisa (7 file)
├── lib/           # Librerie e utilità core (5 file)
├── utils/         # Funzioni di utilità (10 file)
├── data/          # Dati statici di esempio (1 file)
├── App.tsx        # Componente root dell'app
├── main.tsx       # Entry point React
└── index.css      # Stili globali Tailwind
```

### `/public` - RISORSE STATICHE
```
public/
├── logo 1 CCV.png      # Logo principale
├── logo 2 CCV.png      # Logo alternativo
├── iconwinenode.png    # Icona app
├── ai.png             # Icona AI
├── glass.png          # Icona bicchiere
├── rotate-phone.png   # Icona rotazione
└── manifest.json      # PWA manifest
```

## 🎯 COMPONENTI PRINCIPALI

### **PAGINE CORE** (`/src/pages`)
1. **ArchiviPage.tsx** (1,400+ righe) - Pagina principale gestione inventario
2. **HomePage.tsx** - Dashboard principale con panoramica
3. **SettingsPage.tsx** - Configurazioni app
4. **GoogleSheetsPage.tsx** - Integrazione Google Sheets
5. **ManualWineInsertPage.tsx** - Inserimento manuale vini
6. **FornitoriPage.tsx** - Gestione fornitori
7. **ImportaPage.tsx** - Importazione dati
8. **AccountPage.tsx** - Gestione account utente
9. **PreferenzePage.tsx** - Preferenze utente
10. **FoglioExcelPage.tsx** - Gestione fogli Excel

### **COMPONENTI UI** (`/src/components`)
- **WineTableHeader.tsx** - Header tabella vini
- **WineTableRow.tsx** - Riga singola tabella vini
- **CategoryTabs.tsx** - Tab categorie vini
- **SearchAndFilters.tsx** - Ricerca e filtri
- **ImportaVini.tsx** - Form importazione
- **LoginForm.tsx** - Form autenticazione
- **WineCard.tsx** - Card singolo vino
- **WineDetailsModal.tsx** - Modal dettagli vino
- **InventoryModal.tsx** - Modal gestione inventario
- **FilterModal.tsx** - Modal filtri avanzati
- **FornitoreModal.tsx** - Modal gestione fornitori
- **OrdineModal.tsx** - Modal ordini
- **SaldoCommand.tsx** - Comando saldo
- **AuthTester.tsx** - Test autenticazione

### **CUSTOM HOOKS** (`/src/hooks`)
- **useWines.ts** - Gestione stato vini
- **useWineData.ts** - Caricamento dati vini
- **useSuppliers.ts** - Gestione fornitori
- **useTipologie.ts** - Gestione tipologie vini
- **useColumnResize.ts** - Ridimensionamento colonne
- **useAnni.ts** - Gestione anni
- **useAnno.ts** - Singolo anno

### **LIBRERIE CORE** (`/src/lib`)
- **supabase.ts** - Client Supabase e autenticazione
- **googleSheets.ts** - Integrazione Google Sheets
- **importFromGoogleSheet.ts** - Import da Google Sheets
- **wineProcessing.ts** - Elaborazione dati vini
- **utils.ts** - Utilità generiche

## 🗄️ STRUTTURA DATABASE SUPABASE

### **Tabella `vini`**
```sql
- id (uuid, primary key)
- user_id (uuid, foreign key)
- name (text) - Nome vino
- vintage (text) - Anno
- description (text) - Descrizione/Produttore
- region (text) - Provenienza
- type (text) - Tipologia
- supplier (text) - Fornitore
- inventory (integer) - Giacenza
- cost_price (decimal) - Prezzo costo
- sale_price (decimal) - Prezzo vendita
- created_at (timestamp)
- updated_at (timestamp)
```

### **Tabella `suppliers`**
```sql
- id (uuid, primary key)
- user_id (uuid, foreign key)
- name (text) - Nome fornitore
- contact_info (text) - Info contatto
- created_at (timestamp)
- updated_at (timestamp)
```

### **Politiche RLS (Row Level Security)**
- Ogni utente vede solo i propri dati
- Filtro automatico per `user_id`
- Sicurezza a livello database

## 🔧 FUNZIONALITÀ IMPLEMENTATE

### **GESTIONE INVENTARIO**
- ✅ Visualizzazione tabellare con filtri
- ✅ Ricerca per nome/produttore/fornitore
- ✅ Modifica giacenze in tempo reale
- ✅ Salvataggio automatico (1 secondo delay)
- ✅ Categorie: Bollicine IT/FR, Bianchi, Rossi, Rosati, Vini Dolci
- ✅ Vista "Tutti i vini" consolidata

### **SINCRONIZZAZIONE DATI**
- ✅ Import da Google Sheets CSV
- ✅ Parsing automatico CSV con mapping colonne
- ✅ Upsert intelligente (update se esiste, insert se nuovo)
- ✅ Test connessione Google Sheets
- ✅ Gestione errori di rete e formato

### **INTERFACCIA UTENTE**
- ✅ Design mobile-first responsive
- ✅ Tema scuro burgundy/bordeaux
- ✅ Tabelle ridimensionabili
- ✅ Font size dinamico per tablet
- ✅ Animazioni fluide
- ✅ Feedback utente (loading, errori)

### **AUTENTICAZIONE & SICUREZZA**
- ✅ Login/Logout con Supabase Auth
- ✅ Gestione sessioni persistenti
- ✅ AuthManager singleton
- ✅ Protezione route private
- ✅ Isolamento dati per utente

## 📊 METRICHE CODICE

### **Righe di Codice per Categoria**
- **Pagine**: ~3,500 righe (ArchiviPage 40% del totale)
- **Componenti**: ~2,000 righe
- **Hooks**: ~800 righe
- **Lib**: ~600 righe
- **Utils**: ~400 righe
- **TOTALE**: ~7,300 righe TypeScript/React

### **File per Tipologia**
- **.tsx**: 33 file (componenti/pagine)
- **.ts**: 17 file (logica/utilità)
- **.css**: 1 file (stili globali)
- **.json**: 4 file (config)

## 🔄 FLUSSO DATI PRINCIPALE

### **1. Caricamento Iniziale**
```
App.tsx → AuthManager → Supabase Auth Check
↓
ArchiviPage → useWines → Supabase Query
↓
WineTableRow → Display con editing inline
```

### **2. Sincronizzazione CSV**
```
GoogleSheetsPage → Test Connection
↓
useWineData → fetchAndParseCSV
↓
wineProcessing → normalizeWineData
↓
upsertToSupabase → Batch Insert/Update
```

### **3. Editing Real-time**
```
WineTableRow → handleCellChange
↓
Auto-save timeout (1s)
↓
saveRowToDatabase → Supabase Update
↓
refreshWines → Re-fetch data
```

## 🎨 SISTEMA DESIGN

### **Colori Tema**
- **Primario**: Burgundy (#2d0505, #4d0707)
- **Secondario**: Amber (#f59e0b, #d97706)
- **Accenti**: Red (#dc2626), Green (#16a34a)
- **Neutri**: Gray scale per testi

### **Typography**
- **Mobile**: 12px base
- **Tablet Landscape**: 14px base
- **Desktop**: 16px base
- **Font**: System fonts (Arial fallback)

### **Layout**
- **Mobile-first**: Design primario per smartphone
- **Responsive**: Breakpoint 480px, 768px, 1024px
- **Sticky headers**: Header e filtri sempre visibili
- **Scroll optimization**: Tabelle ottimizzate per touch

## 🚀 PERFORMANCE & OTTIMIZZAZIONI

### **React Optimizations**
- useMemo per filtri e calcoli pesanti
- useCallback per handler event
- Lazy loading componenti modali
- Debounced auto-save (1 secondo)
- Virtual scrolling per tabelle grandi

### **Bundle Optimization**
- Tree shaking automatico Vite
- Code splitting per route
- Asset optimization
- CSS purging Tailwind

### **Database Optimizations**
- Indexed queries su user_id
- Batch upserts per CSV import
- Connection pooling Supabase
- RLS policies efficienti

## 🔍 FILE CHIAVE DA MONITORARE

### **Core Business Logic**
1. `src/pages/ArchiviPage.tsx` - Cuore applicazione
2. `src/hooks/useWines.ts` - Gestione stato vini
3. `src/lib/supabase.ts` - Database connection
4. `src/hooks/useWineData.ts` - CSV processing

### **Performance Critical**
1. `src/components/WineTableRow.tsx` - Rendering tabella
2. `src/hooks/useColumnResize.ts` - Interaction UX
3. `src/utils/wineUtils.ts` - Data transformation

### **Security & Auth**
1. `src/lib/supabase.ts` - AuthManager class
2. `src/components/LoginForm.tsx` - Authentication UI

## 📋 STATO PULIZIA CODICE

### **✅ FILES PULITI (Gennaio 2025)**
- Rimossi 12 file obsoleti CSV utilities
- Eliminati import inutilizzati
- Refactoring ArchiviPage per chiarezza
- Standardizzato error handling
- Ottimizzato TypeScript strict mode

### **🔧 AREE DA MIGLIORARE**
- Splitting ArchiviPage (1400+ righe)
- Maggiore tipizzazione TypeScript
- Test coverage (attualmente 0%)
- Error boundaries React
- Offline capabilities

## 🏁 CONCLUSIONI

Il progetto WINENODE presenta una **architettura solida** con:
- ✅ **Scalabilità**: Supabase cloud + React modulare
- ✅ **Manutenibilità**: Codice TypeScript tipizzato
- ✅ **Performance**: Ottimizzazioni React + Vite
- ✅ **UX**: Mobile-first responsive design
- ✅ **Sicurezza**: RLS + Auth gestita

**Pronto per produzione** con deployment su Replit/Netlify.

---
Report generato: Gennaio 2025
Versione codice: Post-cleanup integrale
Righe totali: ~7,300 TypeScript/React
Database: Supabase PostgreSQL
Stato: ✅ PRODUCTION READY
