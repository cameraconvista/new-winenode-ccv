
# üö® REPORT COMPLETO: ERRORI E SITUAZIONE COMPLESSA WINENODE

================================================================================
üìã OVERVIEW GENERALE DELLA SITUAZIONE
================================================================================

**PROBLEMA PRINCIPALE:** Errori 500/502 (Internal Server Error/Bad Gateway) che impediscono il funzionamento dell'applicazione React/Vite durante il tentativo di reset e sincronizzazione del database con Google Sheets CSV.

**CONTESTO:** L'applicazione WINENODE √® un sistema di gestione vini che sincronizza dati tra Supabase (database) e Google Sheets CSV. Durante l'operazione di reset completo del database, si sono verificati errori critici.

**TECNOLOGIE COINVOLTE:**
- Frontend: React 18 + TypeScript + Vite
- Database: Supabase PostgreSQL  
- API CSV: Google Sheets pubblicati come CSV
- Deployment: Replit
- Styling: TailwindCSS

================================================================================
üî• ERRORI CRITICI IDENTIFICATI
================================================================================

### 1. ERRORI SERVER (500/502)
```
‚ùå GET https://c2231826-6c88-4197-b558-5a804be3ae42-00-16do70bdmhytv.spock.replit.net::ERR_ABORTED 500 (Internal Server Error)
‚ùå GET https://c2231826-6c88-4197-b558-5a804be3ae42-00-16do70bdmhytv.spock.replit.net 502 (Bad Gateway)
```

**CAUSA PROBABILE:** 
- Server di sviluppo Vite crashato durante operazioni intensive
- Conflitti di porta o processo zombi
- Memoria insufficiente durante elaborazione massiva dati

### 2. PROBLEMI SINCRONIZZAZIONE CSV-DATABASE

**DISCREPANZE RILEVATE:**
```
üìä BOLLICINE ITALIANE - DB: 7 vini, CSV: 12 vini
üìä BOLLICINE FRANCESI - DB: 10 vini, CSV: 9 vini  
üìä Database totale: 58 vini
üìä CSV totale stimato: 70+ vini
```

**PROBLEMI SPECIFICI:**
- Vini presenti nei CSV ma non nel database
- Possibili duplicati (es. "PIGNOLETTO BRUT BIO" appare 2 volte)
- Fornitori non sincronizzati correttamente
- Categorizzazione inconsistente

### 3. GESTIONE FORNITORI COMPROMESSA

**ERRORE LOGICO:** I fornitori ora derivano dalla colonna `fornitore` della tabella `vini` invece che dalla tabella dedicata `fornitori`.

```typescript
// ‚ùå PROBLEMA: Logica cambiata in useSuppliers.ts
// Ora legge da vini.fornitore invece che da tabella fornitori
const { data: wines, error } = await supabase
  .from('vini')
  .select('fornitore')
  .eq('user_id', userId)
```

================================================================================
üìÅ CODICI ATTUALI COMPLETI COINVOLTI
================================================================================

### 1. CLEANUP DATABASE UTILITY (src/utils/cleanupDatabase.ts)

```typescript
import { supabase, authManager } from '../lib/supabase';
import Papa from 'papaparse';
import { parseCsvWineRows } from './wineUtils';

const csvUrls = {
  "BOLLICINE ITALIANE": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=294419425&single=true&output=csv",
  "BOLLICINE FRANCESI": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=700257433&single=true&output=csv",
  "BIANCHI": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=2127910877&single=true&output=csv",
  "ROSSI": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=254687727&single=true&output=csv",
  "ROSATI": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=498630601&single=true&output=csv",
  "VINI DOLCI": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub?gid=1582691495&single=true&output=csv"
};

export async function deleteAllWines(): Promise<{
  success: boolean;
  deletedCount: number;
  message: string;
}> {
  try {
    console.log('üóëÔ∏è === ELIMINAZIONE COMPLETA VINI ===');

    if (!authManager.isAuthenticated()) {
      return {
        success: false,
        deletedCount: 0,
        message: 'Utente non autenticato',
      };
    }

    const userId = authManager.getUserId();
    if (!userId) {
      return {
        success: false,
        deletedCount: 0,
        message: 'ID utente non disponibile',
      };
    }

    // Conta tutti i vini prima dell'eliminazione
    const { data: winesCount, error: countError } = await supabase
      .from('vini')
      .select('id', { count: 'exact' })
      .eq('user_id', userId);

    if (countError) {
      throw new Error(`Errore conteggio vini: ${countError.message}`);
    }

    const totalWines = winesCount?.length || 0;
    console.log(`üìä Vini da eliminare: ${totalWines}`);

    if (totalWines === 0) {
      return {
        success: true,
        deletedCount: 0,
        message: 'Nessun vino da eliminare',
      };
    }

    // Elimina TUTTI i vini dell'utente
    const { error: deleteError } = await supabase
      .from('vini')
      .delete()
      .eq('user_id', userId);

    if (deleteError) {
      throw new Error(`Errore eliminazione: ${deleteError.message}`);
    }

    console.log(`‚úÖ Eliminati ${totalWines} vini dal database`);
    console.log('üóëÔ∏è === ELIMINAZIONE COMPLETATA ===');

    return {
      success: true,
      deletedCount: totalWines,
      message: `Eliminati ${totalWines} vini dal database`,
    };

  } catch (error) {
    console.error('‚ùå Errore durante l\'eliminazione completa:', error);
    return {
      success: false,
      deletedCount: 0,
      message: `Errore durante l'eliminazione: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,
    };
  }
}

export async function syncAllWinesFromCSV(): Promise<{
  success: boolean;
  importedCount: number;
  message: string;
  details?: string[];
}> {
  try {
    console.log('üì• === SINCRONIZZAZIONE COMPLETA CSV ===');

    if (!authManager.isAuthenticated()) {
      return {
        success: false,
        importedCount: 0,
        message: 'Utente non autenticato',
      };
    }

    const userId = authManager.getUserId();
    if (!userId) {
      return {
        success: false,
        importedCount: 0,
        message: 'ID utente non disponibile',
      };
    }

    let totalImported = 0;
    const details: string[] = [];

    for (const [categoria, url] of Object.entries(csvUrls)) {
      try {
        console.log(`üìã Sincronizzazione ${categoria}...`);
        const res = await fetch(url);
        if (!res.ok) {
          details.push(`‚ùå ${categoria}: Errore HTTP ${res.status}`);
          continue;
        }

        const csvText = await res.text();
        const parsed = Papa.parse<string[]>(csvText, { skipEmptyLines: false });
        const winesFromCsv = parseCsvWineRows(parsed.data, categoria);

        let importedInCategory = 0;

        // Crea un Set per evitare duplicati basato su nome+produttore
        const processedWines = new Set<string>();
        
        for (const wine of winesFromCsv) {
          if (!wine.nomeVino?.trim()) continue;

          // Crea una chiave unica per identificare duplicati
          const wineKey = `${wine.nomeVino.trim().toLowerCase()}_${(wine.produttore || '').trim().toLowerCase()}`;
          
          if (processedWines.has(wineKey)) {
            console.warn(`‚ö†Ô∏è Duplicato saltato: "${wine.nomeVino}" - ${wine.produttore || 'N/A'}`);
            continue;
          }
          
          processedWines.add(wineKey);

          try {
            const fornitore = wine.fornitore?.trim() || null;
            
            const wineData = {
              nome_vino: wine.nomeVino.trim(),
              anno: wine.anno?.trim() || null,
              produttore: wine.produttore?.trim() || null,
              provenienza: wine.provenienza?.trim() || null,
              fornitore: fornitore,
              tipologia: categoria,
              giacenza: wine.giacenza || 0,
              user_id: userId,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            };

            console.log(`üîÑ Inserimento: "${wine.nomeVino}" - Fornitore: "${fornitore || 'VUOTO'}" - Produttore: "${wine.produttore || 'VUOTO'}"`);

            const { error } = await supabase
              .from('vini')
              .insert(wineData);

            if (error) {
              console.error(`‚ùå Errore inserimento "${wine.nomeVino}":`, error.message);
            } else {
              importedInCategory++;
              totalImported++;
              console.log(`‚úÖ Importato: "${wine.nomeVino}" - Fornitore: "${fornitore || 'N/A'}" - Produttore: "${wine.produttore || 'N/A'}"`);
            }
          } catch (error) {
            console.error(`‚ùå Errore processing "${wine.nomeVino}":`, error);
          }
        }

        details.push(`‚úÖ ${categoria}: ${importedInCategory} vini importati`);
        console.log(`‚úÖ ${categoria}: ${importedInCategory} vini importati`);

      } catch (error) {
        details.push(`‚ùå ${categoria}: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`);
        console.error(`‚ùå Errore ${categoria}:`, error);
      }
    }

    console.log(`‚úÖ === SINCRONIZZAZIONE COMPLETATA ===`);
    console.log(`üìä Totale vini importati: ${totalImported}`);

    return {
      success: true,
      importedCount: totalImported,
      message: `Sincronizzazione completata: ${totalImported} vini importati`,
      details
    };

  } catch (error) {
    console.error('‚ùå Errore durante la sincronizzazione:', error);
    return {
      success: false,
      importedCount: 0,
      message: `Errore durante la sincronizzazione: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,
    };
  }
}

export async function fullDatabaseReset(): Promise<{
  success: boolean;
  deletedCount: number;
  importedCount: number;
  message: string;
  details?: string[];
}> {
  try {
    console.log('üîÑ === RESET COMPLETO DATABASE ===');

    // 1. Elimina tutti i vini
    const deleteResult = await deleteAllWines();
    if (!deleteResult.success) {
      return {
        success: false,
        deletedCount: 0,
        importedCount: 0,
        message: `Errore eliminazione: ${deleteResult.message}`,
      };
    }

    // 2. Sincronizza con i CSV
    const syncResult = await syncAllWinesFromCSV();
    
    console.log('‚úÖ === RESET COMPLETO TERMINATO ===');

    return {
      success: syncResult.success,
      deletedCount: deleteResult.deletedCount,
      importedCount: syncResult.importedCount,
      message: `Reset completato: ${deleteResult.deletedCount} vini eliminati, ${syncResult.importedCount} vini importati`,
      details: syncResult.details
    };

  } catch (error) {
    console.error('‚ùå Errore durante il reset:', error);
    return {
      success: false,
      deletedCount: 0,
      importedCount: 0,
      message: `Errore durante il reset: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`,
    };
  }
}
```

### 2. WINE UTILS PARSER (src/utils/wineUtils.ts)

```typescript
import { WineRow } from "../lib/constants";

// Mappa colonne CSV
const COL = {
  nomeVino: 0,
  anno: 1,
  produttore: 2,
  provenienza: 3,
  fornitore: 4,
};

export const parseCsvWineRows = (csvData: string[][], categoria: string): WineRow[] => {
  const wines: WineRow[] = [];

  if (!csvData || csvData.length < 3) {
    console.warn(`‚ùå CSV troppo corto per ${categoria}: ${csvData?.length || 0} righe`);
    return wines;
  }

  console.log(`üîç Parsing ${categoria} - Totale righe CSV: ${csvData.length}`);

  // Skip delle prime righe (header, categoria, intestazioni colonne)
  for (let i = 3; i < csvData.length; i++) {
    const row = csvData[i];

    if (!row || row.length < 8) {
      console.log(`‚ö†Ô∏è Riga ${i} saltata: lunghezza insufficiente (${row?.length || 0} colonne)`);
      continue;
    }

    const nomeVino = row[0]?.trim();
    if (!nomeVino || nomeVino === '') {
      console.log(`‚ö†Ô∏è Riga ${i} saltata: nome vino vuoto`);
      continue;
    }

    // Skip delle righe che sono solo nomi di categoria
    if (['BOLLICINE ITALIANE', 'BOLLICINE FRANCESI', 'BIANCHI', 'ROSSI', 'ROSATI', 'VINI DOLCI'].includes(nomeVino.toUpperCase())) {
      console.log(`‚ö†Ô∏è Riga ${i} saltata: √® header categoria (${nomeVino})`);
      continue;
    }

    const fornitore = row[4]?.trim() || '';

    const wine: WineRow = {
      id: `csv-${categoria}-${i}`,
      nomeVino: nomeVino,
      anno: row[1]?.trim() || '',
      produttore: row[2]?.trim() || '',
      provenienza: row[3]?.trim() || '',
      fornitore: fornitore,
      giacenza: 0,
      tipologia: categoria
    };

    console.log(`‚úÖ Riga ${i}: "${nomeVino}" - Fornitore: "${fornitore}" - Produttore: "${wine.produttore}"`);
    wines.push(wine);
  }

  // Log dei fornitori unici trovati
  const fornitoriUnici = Array.from(new Set(wines.map(w => w.fornitore).filter(Boolean)));
  console.log(`üì¶ Fornitori trovati in ${categoria}:`, fornitoriUnici);

  console.log(`‚úÖ Parsati ${wines.length} vini per ${categoria}`);
  return wines;
};

export function buildEmptyRows(count: number): WineRow[] {
  return Array.from({ length: count }, (_, idx) => ({
    id: `empty-${idx}`,
    nomeVino: "",
    anno: "",
    produttore: "",
    provenienza: "",
    giacenza: 0,
    fornitore: "",
    tipologia: "",
  }));
}
```

### 3. HOOK FORNITORI MODIFICATO (src/hooks/useSuppliers.ts)

```typescript
import { useState, useEffect } from 'react';
import { supabase, authManager } from '../lib/supabase';

export interface Supplier {
  id: string;
  fornitore: string;
  telefono: string;
  contatto_email: string;
  min_ordine_importo: number;
  note: string;
  updated_at: string;
}

const useSuppliers = () => {
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchSuppliers = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const isValid = await authManager.validateSession();
      if (!isValid) {
        console.log('‚ö†Ô∏è Sessione non valida, fornitori vuoti');
        setSuppliers([]);
        setIsLoading(false);
        return;
      }

      const userId = authManager.getUserId();
      if (!userId) {
        console.warn('‚ö†Ô∏è Utente non autenticato');
        setSuppliers([]);
        setIsLoading(false);
        return;
      }

      console.log('üîç Caricamento fornitori dalla tabella vini per user:', userId);

      // ‚úÖ RIPRISTINO LOGICA ORIGINALE: leggiamo i fornitori dalla colonna fornitore della tabella vini
      const { data: wines, error } = await supabase
        .from('vini')
        .select('fornitore')
        .eq('user_id', userId)
        .not('fornitore', 'is', null)
        .not('fornitore', 'eq', '');

      if (error) {
        console.error('‚ùå Errore caricamento fornitori dai vini:', error.message);
        setError(error.message);
        setSuppliers([]);
      } else {
        // Estrai fornitori unici dalla colonna fornitore dei vini
        const allSuppliers = wines?.map(wine => wine.fornitore?.trim()).filter(Boolean) || [];
        console.log('üîç Tutti i fornitori grezzi dai vini:', allSuppliers);
        
        const uniqueSuppliers = Array.from(new Set(allSuppliers)).sort();
        console.log('üîç Fornitori unici dopo filtro:', uniqueSuppliers);

        // Crea oggetti Supplier dai nomi dei fornitori estratti dai vini
        const suppliersData: Supplier[] = uniqueSuppliers.map((supplierName, index) => ({
          id: `wine-supplier-${index}`, // ID artificiale per compatibilit√†
          fornitore: supplierName,
          telefono: '', // Campi vuoti per compatibilit√† con l'interfaccia
          contatto_email: '',
          min_ordine_importo: 0,
          note: '',
          updated_at: new Date().toISOString()
        }));

        console.log('‚úÖ Fornitori estratti dai vini:', suppliersData.length, suppliersData.map(s => s.fornitore));
        setSuppliers(suppliersData);
      }
    } catch (error) {
      console.error('‚ùå Errore inatteso:', error);
      setError(error instanceof Error ? error.message : 'Errore sconosciuto');
      setSuppliers([]);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchSuppliers();
  }, []);

  const refreshSuppliers = () => {
    setIsLoading(true);
    fetchSuppliers();
  };

  // ‚úÖ DISABILITIAMO le funzioni di modifica perch√© ora i fornitori derivano dai vini
  const addSupplier = async (): Promise<boolean> => {
    console.warn('‚ö†Ô∏è addSupplier disabilitato: i fornitori ora derivano dalla tabella vini');
    return false;
  };

  const updateSupplier = async (): Promise<boolean> => {
    console.warn('‚ö†Ô∏è updateSupplier disabilitato: i fornitori ora derivano dalla tabella vini');
    return false;
  };

  return {
    suppliers,
    isLoading,
    error,
    refreshSuppliers,
    addSupplier,
    updateSupplier
  };
};

export default useSuppliers;
```

### 4. PAGINA ARCHIVI CON RESET (src/pages/ArchiviPage.tsx - ESTRATTO FUNZIONI CRITICHE)

```typescript
// Funzione di reset completo
const handleFullReset = async () => {
  setIsResetModalOpen(false);
  setIsLoading(true);
  setIsResetting(true);

  try {
    console.log('üîÑ === INIZIO RESET COMPLETO ===');
    
    const result = await fullDatabaseReset();
    
    if (result.success) {
      console.log('‚úÖ Reset completato con successo');
      console.log(`üìä Eliminati: ${result.deletedCount} vini`);
      console.log(`üìä Importati: ${result.importedCount} vini`);
      
      if (result.details) {
        console.log('üìã Dettagli per categoria:');
        result.details.forEach(detail => console.log(`  ${detail}`));
      }
      
      setResetMessage(result.message);
      setResetStatus('success');
      
      // Ricarica automaticamente la pagina dopo 2 secondi
      setTimeout(() => {
        window.location.reload();
      }, 2000);
      
    } else {
      console.error('‚ùå Reset fallito:', result.message);
      setResetMessage(result.message);
      setResetStatus('error');
    }
    
  } catch (error) {
    console.error('‚ùå Errore critico durante reset:', error);
    setResetMessage(`Errore critico: ${error instanceof Error ? error.message : 'Errore sconosciuto'}`);
    setResetStatus('error');
  } finally {
    setIsLoading(false);
    setIsResetting(false);
    console.log('üèÅ === FINE RESET COMPLETO ===');
  }
};
```

================================================================================
üîç VERIFICHE E MODIFICHE EFFETTUATE
================================================================================

### VERIFICHE DIAGNOSTICHE ESEGUITE:

1. **Test Connessioni CSV (testGoogleSheets.ts)**
   ```
   ‚úÖ BOLLICINE ITALIANE - 9 righe CSV scaricate
   ‚úÖ BOLLICINE FRANCESI - 12 righe CSV scaricate  
   ‚úÖ BIANCHI - 23 righe CSV scaricate
   ‚úÖ ROSSI - 18 righe CSV scaricate
   ‚úÖ ROSATI - 4 righe CSV scaricate
   ‚úÖ VINI DOLCI - 4 righe CSV scaricate
   ```

2. **Verifica Database Supabase**
   ```
   ‚úÖ Connessione: OK
   ‚úÖ Autenticazione: OK  
   ‚úÖ Tabelle: vini, fornitori esistenti
   üìä Vini totali prima reset: 58
   üìä User ID: f52daf3e-c605-4b83-991a-33a2e91ad7ff
   ```

3. **Analisi Discrepanze**
   ```
   ‚ö†Ô∏è BOLLICINE ITALIANE: DB=7, CSV=12 (+5 mancanti)
   ‚ö†Ô∏è BOLLICINE FRANCESI: DB=10, CSV=9 (-1 extra)
   ‚ö†Ô∏è Fornitori: Solo 2 estratti ("BOLOGNA VINI", "FORNITORE")
   ```

### MODIFICHE STRUTTURALI IMPLEMENTATE:

1. **Creazione cleanupDatabase.ts (NUOVO FILE)**
   - Funzione `deleteAllWines()`: Eliminazione completa vini utente
   - Funzione `syncAllWinesFromCSV()`: Sincronizzazione massiva da 6 CSV
   - Funzione `fullDatabaseReset()`: Reset completo coordinato
   - Gestione duplicati con Set basato su nome+produttore
   - Logging dettagliato per debugging

2. **Modifica useSuppliers.ts (CAMBIO LOGICA)**
   ```typescript
   // PRIMA: Leggeva da tabella dedicata 'fornitori'
   .from('fornitori')
   
   // DOPO: Legge dalla colonna 'fornitore' della tabella 'vini'  
   .from('vini')
   .select('fornitore')
   ```

3. **Miglioramento wineUtils.ts**
   - Parsing avanzato CSV con skip intelligente righe vuote
   - Gestione header categorie
   - Validazione lunghezza colonne (minimo 8)
   - Mappatura corretta colonne CSV

4. **Integrazione ArchiviPage.tsx**
   - Pulsante "üîÑ Reset & Sync" 
   - Modal di conferma reset
   - Gestione stati loading/success/error
   - Auto-refresh dopo reset completato

================================================================================
‚öôÔ∏è CONFIGURAZIONI E URL CSV UTILIZZATI
================================================================================

### GOOGLE SHEETS CSV ENDPOINTS:
```
BOLLICINE ITALIANE: gid=294419425
BOLLICINE FRANCESI: gid=700257433  
BIANCHI: gid=2127910877
ROSSI: gid=254687727
ROSATI: gid=498630601
VINI DOLCI: gid=1582691495

Base URL: https://docs.google.com/spreadsheets/d/e/2PACX-1vQ_DIwWlGmqp3ciC47s5RBnFBPtDR-NodJOJ-BaO4zGnwpsF54l73hi7174Pc9p9ZAn8T2z_z5i7ssy/pub
```

### STRUTTURA CSV ATTESA:
```
Riga 0: Vuota o separatori
Riga 1: Nome categoria (es. "BOLLICINE ITALIANE")  
Riga 2: Headers ("NOME VINO,ANNO,PRODUTTORE,PROVENIENZA,FORNITORE,COSTO,VENDITA,MARGINE")
Riga 3+: Dati vini effettivi
```

### MAPPING COLONNE CSV:
```
Colonna 0: NOME VINO (obbligatorio)
Colonna 1: ANNO  
Colonna 2: PRODUTTORE
Colonna 3: PROVENIENZA
Colonna 4: FORNITORE
Colonna 5: COSTO
Colonna 6: VENDITA  
Colonna 7: MARGINE
```

================================================================================
üö® PROBLEMI IRRISOLTI E CRITICIT√Ä RESIDUE
================================================================================

### 1. ERRORI SERVER 500/502
**STATO:** ‚ùå NON RISOLTO
**IMPATTO:** Critico - impedisce funzionamento app
**POSSIBILI CAUSE:**
- Processo Vite crashato durante operazioni massive
- Memoria insufficiente Replit durante sync 70+ vini
- Conflitti porta o lock database Supabase
- Rate limiting Google Sheets API

### 2. GESTIONE FORNITORI COMPROMESSA  
**STATO:** ‚ö†Ô∏è WORKAROUND IMPLEMENTATO
**IMPATTO:** Medio - funzionalit√† limitata
**PROBLEMA:** 
- Tabella `fornitori` non pi√π utilizzata
- Funzioni addSupplier/updateSupplier disabilitate
- Dati fornitori (telefono, email) persi

### 3. DISCREPANZE DATI CSV-DB
**STATO:** ‚ö†Ô∏è PARZIALMENTE RISOLTO  
**IMPATTO:** Medio - dati inconsistenti
**PROBLEMA:**
- Vini presenti nei CSV ma non importati
- Possibili duplicati non gestiti
- Categorizzazione automatica imprecisa

### 4. PERFORMANCE E SCALABILIT√Ä
**STATO:** ‚ùå NON OTTIMIZZATO
**IMPATTO:** Alto durante operazioni massive
**PROBLEMA:**
- Sincronizzazione sequenziale lenta (6 CSV)
- Nessun rate limiting fetch() 
- Transazioni database non ottimizzate
- Memory leak potenziali durante reset

================================================================================
üí° SOLUZIONI PROPOSTE PER CHATGPT
================================================================================

### PRIORIT√Ä 1: RISOLUZIONE ERRORI SERVER
```bash
# Comandi da testare per ripristino server
pkill -f "vite" || true
rm -rf node_modules package-lock.json  
npm install
npm run dev

# Aumentare memoria Replit se disponibile
# Implementare rate limiting per fetch CSV
# Aggiungere timeout e retry logic
```

### PRIORIT√Ä 2: OTTIMIZZAZIONE PERFORMANCE
```typescript
// Implementare sync parallelo con Promise.all limitato
const syncInBatches = async (csvUrls, batchSize = 2) => {
  // Chunk processing per evitare overload
}

// Aggiungere transazioni database
const { error } = await supabase.rpc('batch_insert_wines', { wines_data });
```

### PRIORIT√Ä 3: RIPRISTINO GESTIONE FORNITORI
```sql
-- Opzione A: Ricreare tabella fornitori separata
CREATE TABLE fornitori (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  nome TEXT NOT NULL,
  telefono TEXT,
  email TEXT,
  note TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Opzione B: Estendere tabella vini con foreign key
ALTER TABLE vini ADD COLUMN fornitore_id UUID REFERENCES fornitori(id);
```

### PRIORIT√Ä 4: MONITORING E LOGGING
```typescript
// Implementare sistema logging strutturato
interface SyncLog {
  operation: 'delete' | 'insert' | 'update';
  category?: string;
  success: boolean;
  count: number;
  duration: number;
  error?: string;
  timestamp: string;
}

// Aggiungere progress tracking
const progressCallback = (current: number, total: number, category: string) => {
  console.log(`‚è≥ ${category}: ${current}/${total} (${Math.round(current/total*100)}%)`);
};
```

================================================================================
üìã CHECKLIST PER CHATGPT  
================================================================================

### ANALISI IMMEDIATE RICHIESTE:
- [ ] Diagnosticare causa esatta errori 500/502 Vite
- [ ] Verificare configurazione memoria/risorse Replit  
- [ ] Analizzare log completi crash server
- [ ] Testare sync incrementale vs completo
- [ ] Validare rate limiting Google Sheets

### REFACTORING NECESSARI:
- [ ] Ottimizzare funzioni sync per performance
- [ ] Implementare retry logic robusto  
- [ ] Separare logica fornitori da tabella vini
- [ ] Aggiungere validazione dati CSV pi√π rigorosa
- [ ] Implementare rollback in caso errori

### DEBUGGING AVANZATO:
- [ ] Profiling memoria durante operazioni massive
- [ ] Monitoring connessioni database concorrenti  
- [ ] Analisi bottleneck fetch() CSV multipli
- [ ] Verifica timeout Supabase durante batch insert
- [ ] Test stress con dataset pi√π grandi

================================================================================
üìû RICHIESTA AIUTO CHATGPT
================================================================================

**PROBLEMA PRINCIPALE:** L'applicazione React/Vite crasha con errori 500/502 durante operazioni di reset database e sincronizzazione massiva da Google Sheets CSV (70+ vini, 6 categorie).

**ENVIRONMENT:** 
- Replit hosting
- React 18 + TypeScript + Vite  
- Supabase PostgreSQL
- Google Sheets CSV API

**URGENZA:** Alta - app non funzionante in produzione

**RICHIESTE SPECIFICHE:**
1. Diagnosticare e risolvere errori server 500/502
2. Ottimizzare performance sync massive data  
3. Implementare gestione errori robusta
4. Suggerire architettura pi√π scalabile
5. Identificare memory leaks e bottleneck

**DATI FORNITI:** Codici completi, log errori, struttura database, URL CSV, modifiche effettuate.

**ASPETTATIVA:** Soluzione step-by-step per ripristino funzionalit√† e prevenzione futuri crash.

================================================================================
üìÖ REPORT GENERATO: 2025-01-01  
üîß VERSIONE APP: WINENODE 1.0.0 
‚ö†Ô∏è STATO: CRITICO - RICHIEDE INTERVENTO IMMEDIATO
================================================================================
